/********************************************************
块设备程序框架
*******************************************************/

1. 搭建驱动程序框架
    static int BlockInit(void)
    static void BlockExit(void)

    module_init(BlockInit);
    module_exit(BlockExit);

    MODULE_LICENSE("GPL");

2. static struct gendisk *ramblock_disk;
   static request_queue_t *ramblock_queue;
   static DEFINE_SPINLOCK(ramblock_lock);

   static int major;

   static struct block_device_operations ramblock_fops = {
           .owner	= THIS_MODULE,
   };

   #define RamBlockSize (1024*1024)

   static int BlockInit(void)
   {
        //1. 分配一个gendisk结构体
        ramblock_disk = alloc_disk(2);       //次设备号的个数：最多多少分区

        //2.设置
        //2.1 分配一个队列，提供读写能力
        ramblock_queue = blk_init_queue(do_ramblock_request, &ramblock_lock);
        ramblock_disk->queue = ramblock_queue;
        //2.2 设置其他属性
        major = register_blkdev(0, "ramblock");

        ramblock_disk->major = major;
        ramblock_disk->first_minor = 0;
        sprintf(ramblock_disk->disk_name, "ramblock");
        ramblock_disk->fops = &ramblock_fops;

        set_capacity(ramblock_disk, RamBlockSize/512);

        //3. 硬件相关的操作
        ram_BlockBuffer = kzalloc(RamBlockSize, GFP_KERNEL);

        //4. 注册
        add_disk(ramblock_disk);
   }

   完善do_ramblock_request函数
   static void do_ramblock_request(request_queue_t * q)
   {
       static int r_cnt = 0;
       static int w_cnt = 0;
       struct request *req;
       printk("do_ramblock_request %d\n", ++cnt);

       while ((req = elv_next_request(q)) != NULL)
       {
           //数据传输三要素： 源  目的  长度
           unsigned long offset = req->sector * 512;

           unsigned long len = req->current_nr_sectors * 512;

           if(rq_data_dir(req) == READ)
           {
               memcpy(req->buffer, ram_BlockBuffer + offset, len);              //具体的硬件操作
               printk("read count =  %d\n", ++r_cnt);
           }
           else
           {
               memcpy(ram_BlockBuffer + offset, req->buffer, len);
               printk("write count =  %d\n", ++w_cnt);
           }

           end_request(req, 1);	/* wrap up, 0 = fail, 1 = success */
       }
   }