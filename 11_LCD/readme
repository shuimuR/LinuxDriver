LCD driver梳理
1. 根据内核中s3c2410fb.c搭建框架
    static int LCD_Init(void);
    static void LCD_Exit();
    module_init(LCD_Init);
    module_exit(LCD_Exit);

    MODULE_LICENSE("GPL");

2. 搭建struct fb_ops结构体
    static struct fb_ops My_LCD_Ops =
            {
                    .owner = THIS_MODULE,
                    .fb_fillrect = cfb_fillrect,
                    .fb_copyarea = cfb_copyarea,
                    .fb_imageblit = cfb_imageblit,
            };

     上面三个函数为通用函数

3. 完善初始化函数
    static struct fb_info *s3c_lcd;
    static volatile unsigned long *gpbcon;
    static volatile unsigned long *gpbdat;
    static volatile unsigned long *gpccon;
    static volatile unsigned long *gpcdat;
    static volatile unsigned long *gpdcon;
    static volatile unsigned long *gpgcon;
    static volatile unsigned long *gpgdat;

    struct lcd_regs {
        unsigned long	lcdcon1;
        unsigned long	lcdcon2;
        unsigned long	lcdcon3;
        unsigned long	lcdcon4;
        unsigned long	lcdcon5;
        unsigned long	lcdsaddr1;
        unsigned long	lcdsaddr2;
        unsigned long	lcdsaddr3;
        unsigned long	redlut;
        unsigned long	greenlut;
        unsigned long	bluelut;
        unsigned long	reserved[9];
        unsigned long	dithmode;
        unsigned long	tpal;
        unsigned long	lcdintpnd;
        unsigned long	lcdsrcpnd;
        unsigned long	lcdintmsk;
        unsigned long	lpcsel;
    };

    static struct lcd_regs *LCD_Regs = NULL;

    static int LCD_Init(void)
    {
        //分配一个fb_info
        s3c_lcd = framebuffer_alloc(0, NULL);
        if(s3c_lcd == NULL)
            return -1;
        //设置
        //2.1设置固定的参数
        strcpy(s3c_lcd->fix.id, "MyLcd");
        s3c_lcd->fix.smem_len = 240*320*16;
        s3c_lcd->fix.type = FB_TYPE_PACKED_PIXELS;
        s3c_lcd->fix.visual = FB_VISUAL_TRUECOLOR;
        s3c_lcd->fix.line_length = 240*2;

        //2.2设置可变的参数
        s3c_lcd->var.xres = 240;
        s3c_lcd->var.yres = 320;
        s3c_lcd->var.xres_virtual = 240;
        s3c_lcd->var.yres_virtual = 320;
        s3c_lcd->var.bits_per_piex = 16;

        //RGB 565
        s3c_lcd->var.red.offset = 11;
        s3c_lcd->var.red.length = 5;

        s3c_lcd->var.red.offset = 5;
        s3c_lcd->var.red.length = 6;

        s3c_lcd->var.red.offset = 0;
        s3c_lcd->var.red.length = 5;

        s3c_lcd->var.active = FB_ACTIVATE_NOW;

        //2.3设置操作函数
        s3c_lcd->fbops = &My_LCD_Ops;

        //2.4其他的设置
        s3c_lcd->pseudo_pallete = pseudo_palette;
        //s3c_lcd->screen_base = ;        //显存的虚拟地址
        s3c_lcd->screen_size = 240*320*16/8;

        //3硬件相关的操作
        //3.1配置GPIO 用于LCD
        gpbcon = (volatile unsigned long *)ioremap(0x56000010, 8);
        gpbdat = gpbcon + 1;
        gpccon = (volatile unsigned long *)ioremap(0x56000020, 8);
        gpcdat = gpdcon + 1;
        gpdcon = (volatile unsigned long *)ioremap(0x56000030, 8);
        gpgcon = (volatile unsigned long *)ioremap(0x56000060, 8);
        gpgdat = gpgcon + 1;

        *gpccon = 0xaaaaaaaa;
        *gpdcon = 0xaaaaaaaa;

        *gpbcon &= ~(3);
        *gpbcon |= 1;
        *gpbdat |= 1;

        *gpgcon |= (3 << 8);

        //3.2根据LCD手册设置LCD控制器，如VCLK
        LCD_Regs = (volatile unsigned long *)ioremap(0x4D000000, sizeof(struct lcd_regs));
        LCD_Regs->lcdcon1 =  (4<<8) | (3 << 5) | (0x0C << 1);
        LCD_Regs->lcdcon2 = (3 << 24) | (319<<14) | (1<<6);
        LCD_Regs->lcdcon3 = (16<<19) | (239<<8) | (10<<0);
        LCD_Regs->lcdcon4 = 4;
        LCD_Regs->lcdcon5 = (1 << 11) | (0 << 10) | (1 << 9) | (1 << 8) | (1 << 0);

        //3.3分配framebuffer，并把地址告诉LCD控制器
        s3c_lcd->screen_base = dma_alloc_writecombine(NULL, s3c_lcd->fix.smem_len, &s3c_lcd->fix.smem_start, GFP_KERNEL);

        LCD_Regs->lcdsaddr1 = (s3c_lcd->fix.smem_start >> 1) & ~(3 << 30);
        LCD_Regs->lcdsaddr2 = ((s3c_lcd->fix.smem_start + s3c_lcd->fix.smem_len) >> 1) & 0x1FFFFF;
        LCD_Regs->lcdsaddr3 = (240*16/16);

        //启动LCD
        LCD_Regs->lcdcon1 |= (1 << 0);
        *gpbdat |= 1;               //open backlight

        //注册
        register_framebuffer(s3c_lcd);
        return 0;
    }

    static void lcd_exit(void)
    {
    	unregister_framebuffer(s3c_lcd);
    	lcd_regs->lcdcon1 &= ~(1<<0); /* 关闭LCD本身 */
    	*gpbdat &= ~1;     /* 关闭背光 */
    	dma_free_writecombine(NULL, s3c_lcd->fix.smem_len, s3c_lcd->screen_base, s3c_lcd->fix.smem_start);
    	iounmap(lcd_regs);
    	iounmap(gpbcon);
    	iounmap(gpccon);
    	iounmap(gpdcon);
    	iounmap(gpgcon);
    	framebuffer_release(s3c_lcd);
    }

